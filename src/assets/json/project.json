{
  "items": [
    {
      "id": 5,
      "name": "사이드픽(Side-Peek)",
      "summary": "사이드 프로젝트 아이디어 및 결과물을 공유하는 커뮤니티 서비스입니다.",
      "date": "2024.01 ~ (진행중)",
      "scale": "백엔드 3명 / 프론트엔드 5명",
      "process": [
        "Git/Github 기반 협업 환경 구축 및 Git Flow 전략 도입",
        "Notion 이용하여 API 명세서, 와이터 프레임, 회의 기록, Github Projects 개발 과정 공유 및 결과물 기록"
      ],
      "role": [
        "프로젝트 게시글/댓글 CUD API 구현 및 Generic 문법과 Functional Interface를 이용한 유효성 검사 메서드 재사용 및 가독성 확보",
        "LIKE 기반 기술 스택 데이터 확보 구상 후 기술 스택 검색 API 구현",
        "LIKE 기반 회원 멤버 닉네임 검색 API 구현",
        "AWS SDK와 S3를 이용한 이미지 업로드 API 구현 및 Mocking으로 테스트 환경에서 외부 의존성 제거",
        "개발/운영 서버에서 발생하는 즉각적인 예외 인지를 위해 Sentry 연동 및 Webhook을 이용한 Slack 알림 기능 구현"
      ],
      "category": ["백엔드"],
      "keyword": [
        "Java 17",
        "Spring Boot 3.2.2",
        "JPA",
        "QueryDSL",
        "CheckStyle",
        "JaCoCo",
        "JUnit5",
        "Mockito",
        "Swagger",
        "Sentry",
        "MySQL 8.3.0",
        "Flyway",
        "Docker",
        "Amazon RDS",
        "Github Actions",
        "Amazon EC2",
        "Amazon S3",
        "CodeDeploy",
        "IAM"
      ],
      "trouble": [
        [
          "테스트 코드에서 Entity, Dto 생성/저장 로직 중복 발생, Fixture 제공 클래스 구현으로 중복 개선",
          "생성자에 들어갈 값을 중복으로 정의하는 상황이었습니다. 이 때문에 코드양이 많아져서 신속하고 간단하게 작성해야 하는 테스트 코드를 읽고 작성하는 데에 어려움이 있었습니다. 각각 테스트 클래스에서 중복되는 코드를 찾아서 테스트 환경 전역에서 사용할 수 있는 static 메서드로 정의하고 이러한 메서드를 제공하는 테스트 Fixture 제공 클래스를 구현하여 팀원들에게 사용법을 공유했습니다."
        ],
        [
          "복잡하고 많은 기능으로 인해 정교한 테스트 케이스 작성 어려움, JaCoCo 도입으로 개선",
          "JaCoCo에서 제공하는 Code Coverage Reports를 통해 더욱 정교한 테스트를 작성할 수 있는 환경을 조성했습니다. 또한 Build 시에 라인 커버리지를 넘기지 못하면 Build가 안되도록 설정하여 기능 구현 때마다 확인할 수 있는 환경을 조성했습니다."
        ],
        [
          "Slack 예외 알림 도입 후 응답 속도 저하 문제 발생 및 개선 시도",
          "예외 핸들러에 Slack 알림을 추가하고, 이를 통해 서버에서 발생하는 예외를 즉각적으로 인지할 수 있도록 했습니다. 하지만 이로 인해 예외 핸들러 메서드에 Slack API 요청이 더해져서 응답 속도가 저하되는 문제가 발생했습니다. 이를 해결하기 위해 비동기 방식으로 Slack 알림을 보내는 방식으로 보내는 것을 고려하게 되었습니다."
        ]
      ],
      "result": "🚀 데브코스 최종 프로젝트",
      "url": "https://github.com/side-peek/sidepeek_backend",
      "deployUrl": "https://www.sidepeek.site/"
    },
    {
      "id": 4,
      "name": "OOTW(Outfit-Of-The-Weather)",
      "summary": "날씨에 맞는 코디를 공유하는 커뮤니티 서비스입니다. 사용자가 현재 위치의 날씨를 확인하고, 해당 날씨에 맞는 옷차림을 아바타로 꾸며 공유할 수 있습니다.",
      "date": "2023.12 ~ 2024.01(1개월)",
      "scale": "백엔드 3명",
      "process": [
        "CheckStyle 도입하여 CI 과정에서 지속적인 코드 스타일 통일성 검증",
        "JMeter를 도입하여 API 부하 테스트 진행 후 서버 성능 확인 및 문제점 파악"
      ],
      "role": [
        "OpenFeign 사용하여 기상청 API 요청 후 @JsonSerializer로 응답 데이터 가공 및 Mocking으로 테스트 환경에서 외부 의존성 제거",
        "기상청 단기예보 API를 이용한 현재 일교차를 포함한 코디 게시글 저장 API구현",
        "기상청 초단기예보 API를 이용한 현재 기온 기반 코디 게시글 조회 API구현"
      ],
      "category": ["백엔드"],
      "keyword": [
        "Java 17",
        "Spring Boot 3.2.2",
        "OpenFeign",
        "JPA",
        "CheckStyle",
        "JaCoCo",
        "JUnit5",
        "Mockito",
        "RestDocs",
        "JMeter",
        "MySQL 8.3.0",
        "Docker",
        "Github Actions"
      ],
      "trouble": [
        [
          "날씨 정보 조회 API 응답 시간이 길어지는 문제 해결 시도",
          "기상청 API의 응답 시간이 길어지는 문제가 발생했습니다. 매 호출마다 외부 API를 불러오는 것에서 많은 시간이 소요된다는 것을 알게 되었고 이를 호출 횟수를 줄이고자 Redis 도입을 고민해보았습니다."
        ],
        [
          "코디 공유 게시글 목록 조회 API에서 커서 기반 페이지네이션 시도",
          "JMeter 부하 테스트 결과로 코디 공유 게시글 목록 조회에서 가장 많은 시간이 소요된다는 것을 알게 되었습니다. 모든 게시글 데이터를 한 번에 조회하기 때문에 많은 서버에서 메모리가 필요하게 되었고 이 때문에 서버가 느려진다는 것을 알게 되었습니다. 이후 커서 기반 페이지네이션을 이용하여 필요한 만큼의 데이터를 불러오는 것을 고민하게 되었습니다."
        ],
        [
          "테스트 실행 속도 개선 시도",
          "Build를 위해 실행해야할 테스트 케이스가 대략 200개를 넘어가면서 테스트 실행 속도가 저하되는 것을 인지했습니다. 원인을 찾아본 결과 각각의 테스트 클래스는 각각 다른 Bean의 의존성을 주입받고 있었는데 이는 @SpringBootTest에서 새로운 Context를 만들어낸다는 것을 알게 되었습니다. 이 때문에 속도가 느려진 것을 인지하고 테스트 환경을 하나의 @TestConfiguration으로 통합하여 개선해보려고 고민했습니다."
        ]
      ],
      "result": "🚀 데브코스 백엔드 팀 프로젝트",
      "url": "https://github.com/backendoori/ootw-backend"
    },
    {
      "id": 2,
      "name": "CarKeeper(카키퍼)",
      "summary": "차박 중 차량 외부 외부인/야생동물(이하, 대상)의 접근, 차량 내부 유해가스 위험 상황을 감지하여 사용자에게 알려주는 서비스 입니다. 사용자가 차박 중 자주 일어나는 위험 상황으로부터 신속하게 대응할 수 있도록 도와줌으로써, 안전한 차박을 제공합니다.",
      "date": "2022.06 ~ 2022.12(6개월)",
      "scale": "임베디드 SW 학술 동아리원 4명",
      "category": ["임베디드", "클라우드", "모바일", "백엔드"],
      "keyword": [
        "Flutter",
        "Flask",
        "Firebase",
        "Raspberry Pi 4",
        "Pi Camera",
        "Ultrasonic Sensor",
        "Pan Tilt Motor",
        "Arduino",
        "MQTT"
      ],
      "process": [
        "Backlog 작성 및 일주일 단위의 스프린트를 도입하여 Slack으로 진행상황 기록",
        "Figma를 이용하여 프로토타입 설계 및 Use Case 구체화"
      ],
      "role": [
        "라즈베리파이 카메라로 촬영되는 실시간 영상 스트리밍 API, Websocket 서버 구현 및 포트포워딩 설정",
        "web_socket_channel 라이브러리 및 StreamBuilder를 사용하여 실시간 영상 디코딩 후 영상 확인 페이지 구현",
        "MQTT 프로토콜을 이용하여 실시간 초음파 센서 거리 데이터 수집 및 실시간 영상 속 타깃 위치 좌표 전송 기능 구현",
        "Pan Tilt Motor 제어를 통한 타깃 위치 좌표 기반 카메라 각도 실시간 원격 제어 기능",
        "Firebase의 Cloud Function을 이용하여 Firestore 이벤트 트리거 설정 및 Cloud Messaging을 이용한 모바일 메시지 자동 전송 기능"
      ],
      "trouble": [
        [
          "좌표 값에 따른 서보모터 제어 방식 개선",
          "초기에는 매 프레임마다 [(영상 프레임의 중앙 x, y 좌표) - (대상 박스의 중앙 x, y 좌표)] 값에 '비례'하게 서보 모터 제어 각도를 설정했습니다. 하지만 대상이 빠르게 움직이고, 서보모터 제어 시간도 고려해야하기 때문에 해당 방식의 한계를 깨달았습니다. 이후 좌표 데이터에서 '이동 방향'만 추출하고 프레임마다 '단위 각도'만큼 움직이도록 설정하였습니다. 또한 정확한 서보모터 제어를 위해 제어하는 동안에는 프로그램을 일정 시간동안 Sleep 하도록 설정했습니다. "
        ],
        [
          "로컬 서버 → 서버리스 클라우드 서비스(Google Cloud Functions) 전환으로 개선된 이벤트 감지 시간",
          "YOLO v5 기반 로컬 서버에서는 다른 이벤트들(영상 처리, 대상 좌표 구하기 등)도 처리를 해야하기 때문에, Loop 문을 이용하여 실시간 데이터 모니터링을 하게되면 딜레이가 많이 생기는 상황이었습니다. 딜레이가 생기는 이유는 한 서버에 연산량이 많아져서 발생하는 것이라고 생각했고, 기능을 분리하고자 실시간 데이터 모니터링 기능은 클라우드 서비스를 이용했습니다. 단일 이벤트 목적으로 이용하는 Google Cloud Functions를 사용하면서 이벤트 감지 반응 속도를 높일 수 있었으며, 간편하게 기능을 구현함으로써 개발 시간을 단축할 수 있었습니다. 다른 서비스와의 높은 연동성으로 자동 메시징 기능도 한 번에 해결할 수 있었습니다."
        ],
        [
          "부드러운 서보모터 제어를 위해 pigpio library 사용",
          "RPi.GPIO에서 Pigpio로 변경 후 지터링을 개선하여 더욱 부드럽게 물체를 트래킹하도록 구현했습니다."
        ]
      ],
      "result": "🏆 제 20회 임베디드 소프트웨어 경진대회 자동차/모빌리티 부문 최우수상 (부문 1위)",
      "url": "https://github.com/KOBOTBOARD-11/2022ESWContest_mobility_6017"
    }
  ]
}
